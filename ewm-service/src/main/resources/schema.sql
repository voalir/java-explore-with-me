CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name character varying,
    CONSTRAINT pk_categories PRIMARY KEY (id),
    CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    pinned boolean,
    title character varying,
    CONSTRAINT pk_compilations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(512) NOT NULL,
  CONSTRAINT pk_user PRIMARY KEY (id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation character varying(2000) NOT NULL,
    category_id bigint NOT NULL,
    initiator_id bigint NOT NULL,
    description character varying(7000) NOT NULL,
    event_date timestamp without time zone NOT NULL,
    created_on timestamp without time zone,
    published_on timestamp without time zone,
    lat double precision NOT NULL,
    lon double precision NOT NULL,
    paid boolean,
    participant_limit bigint,
    request_moderation boolean,
    state character varying,
    title character varying(120) NOT NULL,
    CONSTRAINT pk_event PRIMARY KEY (id),
    CONSTRAINT category_fk FOREIGN KEY (category_id) REFERENCES categories (id),
    CONSTRAINT initiator_fk FOREIGN KEY (initiator_id) REFERENCES users (id)
);

CREATE INDEX IF NOT EXISTS events_category_initiator_index ON events USING btree (category_id, initiator_id);

CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created timestamp without time zone,
    event_id bigint NOT NULL,
    requester_id bigint NOT NULL,
    status character varying,
    CONSTRAINT pk_request PRIMARY KEY (id),
    CONSTRAINT event_fk FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT requester_fk FOREIGN KEY (requester_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations_events (
  compilation_id integer REFERENCES compilations (id) ON DELETE CASCADE,
  event_id integer REFERENCES events (id) ON DELETE CASCADE,
  PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE IF NOT EXISTS locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    lat double precision NOT NULL,
    lon double precision NOT NULL,
    radius double precision NOT NULL,
    name character varying,
    CONSTRAINT pk_locations PRIMARY KEY (id),
    CONSTRAINT UQ_LOCATION_NAME UNIQUE (name)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;